## Lesson Aims:
* Be able to describe and apply the following to linear queues, circular queues and priority queues:
  * add an item
  * remove an item
  * test for an empty queue
  * test for a full queue
* Be able to:
  * represent a queue in a programming languange without using the built in queue type
  * use a queue in simple contexts

---
## Common Features of Queues
All queues have the following features in common:
* They are all **F**irst **i**n **F**irst **O**ut **(FIFO)** data structures
* An *Enqueue* method:
  * This method takes a data item and adds it to the rear of the queue
* A *Dequeue* method:
  * This method takes no arguments and removes the item that is at the front of the queue and returns it
* They all have two pointers
  * *Front*: This pointer shows the item to remove when *Dequeue* is called
  * *Rear*: This pointer shows where the rear of the queue is *Enqueue* is called

---
## Linear Queues
**Testing if the queue is Empty**
```python
# We keep track of a size variable to conveniently determine whether
# our queue is empty or not.
def isEmpty(self):
    if self.size == 0:
       return True
    else:
       return False
```
**Testing if the queue is Full**
```python
# We keep track of a size variable to conveniently determine whether
# our queue is full or not. 
def isFull(self):
    # MAX_SIZE is a constant we use to determine the maximum size of
    # our queue. This is declared and used when we instantiate the 
    # object to determine the size of the list we use to represent
    # our queue.
    if self.size == MAX_SIZE:
       return True
    else:
       return False
```
**Enqueue**
```python
# Enqueue Method using OOP
def Enqueue(self, data):
    if self.isFull():
        print("The Queue is full")
    # The queue is not full, so we increment the rear pointer
    # to point to the next available free space and add the
    # data item.
    else:
        self.rear += 1
        self.queue[self.rear]
```
**Dequeue**
```python
# Dequeue Method using OOP
def Dequeue(self):
    if self.isEmpty():
        print("The Queue is empty")
    # Otherwise, if the queue is not empty, there must be an element to
    # return. We do this by returning the element at the index that front
    # points to, and then incrementing front to point to the next element
    # at the front of the queue.
    else:
        return self.queue[self.front]
        front += 1
```
- [x] add an item to a linear queue
- [x] remove an item from a linear queue
- [x] test for an empty linear queue
- [x] test for a full linear queue  

---
## Priority Queues
Testing if the Queue is empty or full is the same as for a Linear Queue. 

**Enqueue**
```python
# Enqueue Method using OOP
def Enqueue(self, data):
    if self.isFull():
        print("The Queue is full")
    # The key difference from a linear queue here is that everytime 
    # we add an item, we call sort(). This ensures that the queue
    # remains sorted by priority.
    else:
        self.rear += 1
        self.queue[self.rear]
        self.queue.sort()
```
**Dequeue**
The Dequeue method will be the same. This is because the queue will always
be sorted in accordance with the priorities as we call sort everytime an
item is added to the queue.
